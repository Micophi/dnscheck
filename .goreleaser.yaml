# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines bellow are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...

builds:
  - # Comments
    id: "dnscheck"
    main: ./cmd/dnscheck/
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      # - windows
      # - darwin

changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"

nfpms:
  # note that this is an array of nfpm configs
  - #
    # ID of the nfpm config, must be unique.
    #
    # Default: 'default'
    id: default

    # Name of the package.
    # Default: ProjectName
    # Templates: allowed. (since v1.18)
    package_name: dnscheck

    # You can change the file name of the package.
    #
    # Default: '{{ .PackageName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end }}'
    # Templates: allowed.
    file_name_template: "{{ .ConventionalFileName }}"

    # Build IDs for the builds you want to create NFPM packages for.
    # Defaults empty, which means no filtering.
    # builds:
    #   - foo
    #   - bar

    # Your app's vendor.
    vendor: micophi

    # Your app's homepage.
    homepage: https://github.com/Micophi/dnscheck

    # Your app's maintainer (probably you).
    maintainer: Micophi <[email protected]>

    # Your app's description.
    description: |-
      Dnscheck installer package.
      Software to test the blocking abilities of DNS servers against a list of malicious domain names.

    # Your app's license.
    license: MIT

    # Formats to be generated.
    formats:
      - deb

    umask: 0o002

    # Packages your package depends on. (overridable)
    dependencies:
      - bash
      - curl
      - moreutils

    bindir: /usr/bin
    version_metadata: git

    # Version Release.
    # release: 1

    # Section.
    section: default

    # Priority.
    priority: extra

    # Custom configuration applied only to the Deb packager.
    deb:
      # Lintian overrides
      lintian_overrides:
        - statically-linked-binary
        - changelog-file-missing-in-native-package

      # # Custom deb special files.
      # scripts:
      #   # Deb rules script.
      #   rules: foo.sh
      #   # Deb templates file, when using debconf.
      #   templates: templates

      # # Custom deb triggers
      # triggers:
      #   # register interest on a trigger activated by another package
      #   # (also available: interest_await, interest_noawait)
      #   interest:
      #     - some-trigger-name
      #   # activate a trigger for another package
      #   # (also available: activate_await, activate_noawait)
      #   activate:
      #     - another-trigger-name

      # Packages which would break if this package would be installed.
      # The installation of this package is blocked if `some-package`
      # is already installed.
      # breaks:
      #   - some-package

      # The package is signed if a key_file is set
      signature:
        # PGP secret key file path (can also be ASCII-armored).
        # The passphrase is taken from the environment variable
        # `$NFPM_ID_DEB_PASSPHRASE` with a fallback to `$NFPM_ID_PASSPHRASE`,
        # where ID is the id of the current nfpm config.
        # The id will be transformed to uppercase.
        # E.g. If your nfpm id is 'default' then the deb-specific passphrase
        # should be set as `$NFPM_DEFAULT_DEB_PASSPHRASE`
        #
        # Templates: allowed.
        # key_file: "{{ .Env.GPG_KEY_PATH }}"

        # The type describes the signers role, possible values are "origin",
        # "maint" and "archive".
        #
        # Default: 'origin'
        type: origin

    # apk:
    #   # APK specific scripts.
    #   scripts:
    #     # The preupgrade script runs before APK upgrade.
    #     preupgrade: ./scripts/preupgrade.sh
    #     # The postupgrade script runs after APK.
    #     postupgrade: ./scripts/postupgrade.sh

    #   # The package is signed if a key_file is set
    #   signature:
    #     # PGP secret key file path (can also be ASCII-armored).
    #     # The passphrase is taken from the environment variable
    #     # `$NFPM_ID_APK_PASSPHRASE` with a fallback to `$NFPM_ID_PASSPHRASE`,
    #     # where ID is the id of the current nfpm config.
    #     # The id will be transformed to uppercase.
    #     # E.g. If your nfpm id is 'default' then the apk-specific passphrase
    #     # should be set as `$NFPM_DEFAULT_APK_PASSPHRASE`
    #     #
    #     # Templates: allowed.
    #     # key_file: "{{ .Env.GPG_KEY_PATH }}"

    #     # The name of the signing key. When verifying a package, the signature
    #     # is matched to the public key store in /etc/apk/keys/<key_name>.rsa.pub.
    #     #
    #     # Default: maintainer's email address
    #     # Templates: allowed. (since v1.15)
    #     key_name: origin

    # archlinux:
    #   # Archlinux-specific scripts
    #   scripts:
    #     # The preupgrade script runs before pacman upgrades the package.
    #     preupgrade: ./scripts/preupgrade.sh
    #     # The postupgrade script runs after pacman upgrades the package.
    #     postupgrade: ./scripts/postupgrade.sh

    #   # The pkgbase can be used to explicitly specify the name to be used to refer
    #   # to a group of packages. See: https://wiki.archlinux.org/title/PKGBUILD#pkgbase.
    #   pkgbase: foo

    #   # The packager refers to the organization packaging the software, not to be confused
    #   # with the maintainer, which is the person who maintains the software.
    #   packager: GoReleaser <[email protected]>
